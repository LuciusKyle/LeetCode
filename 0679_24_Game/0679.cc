
#include <algorithm>
#include <array>
#include <iostream>
#include <string>
#include <vector>

using std::array;
using std::cout;
using std::endl;
using std::string;
using std::vector;

// this solution beats 100%.
class Solution {
 public:
  bool judgePoint24(const vector<int>& nums) {
    // std::sort(nums.begin(), nums.end());
    vector<int> variable_nums(nums);
    do {
      std::next_permutation(variable_nums.begin(), variable_nums.end());
      if (judgePoint24(variable_nums[0], variable_nums[1], variable_nums[2], variable_nums[3])) return true;
      if (judgePoint24(double(variable_nums[0]), double(variable_nums[1]), double(variable_nums[2]), double(variable_nums[3]))) return true;
    } while (variable_nums[0] != nums[0] || variable_nums[1] != nums[1] || variable_nums[2] != nums[2] || variable_nums[3] != nums[3]);
    return false;
  }

 private:
  bool judgePoint24(const int num0, const int num1, const int num2, const int num3) {
    const int all_results[]{
        num0 + num1 + num2 + num3, num0 + num1 + num2 - num3, num0 + num1 + num2 * num3, num0 + num1 - num2 + num3, num0 + num1 - num2 - num3, num0 + num1 - num2 * num3, num0 + num1 * num2 + num3, num0 + num1 * num2 - num3, num0 + num1 * num2 * num3, num0 - num1 + num2 + num3, num0 - num1 + num2 - num3, num0 - num1 + num2 * num3, num0 - num1 - num2 + num3, num0 - num1 - num2 - num3, num0 - num1 - num2 * num3, num0 - num1 * num2 + num3, num0 - num1 * num2 - num3, num0 - num1 * num2 * num3, num0 * num1 + num2 + num3, num0 * num1 + num2 - num3, num0 * num1 + num2 * num3, num0 * num1 - num2 + num3, num0 * num1 - num2 - num3, num0 * num1 - num2 * num3, num0 * num1 * num2 + num3, num0 * num1 * num2 - num3, num0 * num1 * num2 * num3, (num0 + num1) + num2 + num3, (num0 + num1) + num2 - num3, (num0 + num1) + num2 * num3, (num0 + num1) - num2 + num3, (num0 + num1) - num2 - num3, (num0 + num1) - num2 * num3, (num0 + num1) * num2 + num3, (num0 + num1) * num2 - num3, (num0 + num1) * num2 * num3, (num0 - num1) + num2 + num3, (num0 - num1) + num2 - num3, (num0 - num1) + num2 * num3, (num0 - num1) - num2 + num3, (num0 - num1) - num2 - num3, (num0 - num1) - num2 * num3, (num0 - num1) * num2 + num3, (num0 - num1) * num2 - num3, (num0 - num1) * num2 * num3, (num0 * num1) + num2 + num3, (num0 * num1) + num2 - num3, (num0 * num1) + num2 * num3, (num0 * num1) - num2 + num3, (num0 * num1) - num2 - num3, (num0 * num1) - num2 * num3, (num0 * num1) * num2 + num3, (num0 * num1) * num2 - num3, (num0 * num1) * num2 * num3, num0 + (num1 + num2) + num3, num0 + (num1 + num2) - num3, num0 + (num1 + num2) * num3, num0 + (num1 - num2) + num3, num0 + (num1 - num2) - num3, num0 + (num1 - num2) * num3, num0 + (num1 * num2) + num3, num0 + (num1 * num2) - num3, num0 + (num1 * num2) * num3, num0 - (num1 + num2) + num3, num0 - (num1 + num2) - num3, num0 - (num1 + num2) * num3, num0 - (num1 - num2) + num3, num0 - (num1 - num2) - num3, num0 - (num1 - num2) * num3, num0 - (num1 * num2) + num3, num0 - (num1 * num2) - num3, num0 - (num1 * num2) * num3, num0 * (num1 + num2) + num3, num0 * (num1 + num2) - num3, num0 * (num1 + num2) * num3, num0 * (num1 - num2) + num3, num0 * (num1 - num2) - num3, num0 * (num1 - num2) * num3, num0 * (num1 * num2) + num3, num0 * (num1 * num2) - num3, num0 * (num1 * num2) * num3, num0 + num1 + (num2 + num3), num0 + num1 + (num2 - num3), num0 + num1 + (num2 * num3), num0 + num1 - (num2 + num3), num0 + num1 - (num2 - num3), num0 + num1 - (num2 * num3), num0 + num1 * (num2 + num3), num0 + num1 * (num2 - num3), num0 + num1 * (num2 * num3), num0 - num1 + (num2 + num3), num0 - num1 + (num2 - num3), num0 - num1 + (num2 * num3), num0 - num1 - (num2 + num3), num0 - num1 - (num2 - num3), num0 - num1 - (num2 * num3), num0 - num1 * (num2 + num3), num0 - num1 * (num2 - num3), num0 - num1 * (num2 * num3), num0 * num1 + (num2 + num3), num0 * num1 + (num2 - num3), num0 * num1 + (num2 * num3), num0 * num1 - (num2 + num3), num0 * num1 - (num2 - num3), num0 * num1 - (num2 * num3), num0 * num1 * (num2 + num3), num0 * num1 * (num2 - num3), num0 * num1 * (num2 * num3), (num0 + num1) + (num2 + num3), (num0 + num1) + (num2 - num3), (num0 + num1) + (num2 * num3), (num0 + num1) - (num2 + num3), (num0 + num1) - (num2 - num3), (num0 + num1) - (num2 * num3), (num0 + num1) * (num2 + num3), (num0 + num1) * (num2 - num3), (num0 + num1) * (num2 * num3), (num0 - num1) + (num2 + num3), (num0 - num1) + (num2 - num3), (num0 - num1) + (num2 * num3), (num0 - num1) - (num2 + num3), (num0 - num1) - (num2 - num3), (num0 - num1) - (num2 * num3), (num0 - num1) * (num2 + num3), (num0 - num1) * (num2 - num3), (num0 - num1) * (num2 * num3), (num0 * num1) + (num2 + num3), (num0 * num1) + (num2 - num3), (num0 * num1) + (num2 * num3), (num0 * num1) - (num2 + num3), (num0 * num1) - (num2 - num3), (num0 * num1) - (num2 * num3), (num0 * num1) * (num2 + num3), (num0 * num1) * (num2 - num3), (num0 * num1) * (num2 * num3), ((num0 + num1) + num2) + num3, ((num0 + num1) + num2) - num3, ((num0 + num1) + num2) * num3, ((num0 + num1) - num2) + num3, ((num0 + num1) - num2) - num3, ((num0 + num1) - num2) * num3, ((num0 + num1) * num2) + num3, ((num0 + num1) * num2) - num3, ((num0 + num1) * num2) * num3, ((num0 - num1) + num2) + num3, ((num0 - num1) + num2) - num3, ((num0 - num1) + num2) * num3, ((num0 - num1) - num2) + num3, ((num0 - num1) - num2) - num3, ((num0 - num1) - num2) * num3, ((num0 - num1) * num2) + num3, ((num0 - num1) * num2) - num3, ((num0 - num1) * num2) * num3, ((num0 * num1) + num2) + num3, ((num0 * num1) + num2) - num3, ((num0 * num1) + num2) * num3, ((num0 * num1) - num2) + num3, ((num0 * num1) - num2) - num3, ((num0 * num1) - num2) * num3, ((num0 * num1) * num2) + num3, ((num0 * num1) * num2) - num3, ((num0 * num1) * num2) * num3, (num0 + (num1 + num2)) + num3, (num0 + (num1 + num2)) - num3, (num0 + (num1 + num2)) * num3, (num0 + (num1 - num2)) + num3, (num0 + (num1 - num2)) - num3, (num0 + (num1 - num2)) * num3, (num0 + (num1 * num2)) + num3, (num0 + (num1 * num2)) - num3, (num0 + (num1 * num2)) * num3, (num0 - (num1 + num2)) + num3, (num0 - (num1 + num2)) - num3, (num0 - (num1 + num2)) * num3, (num0 - (num1 - num2)) + num3, (num0 - (num1 - num2)) - num3, (num0 - (num1 - num2)) * num3, (num0 - (num1 * num2)) + num3, (num0 - (num1 * num2)) - num3, (num0 - (num1 * num2)) * num3, (num0 * (num1 + num2)) + num3, (num0 * (num1 + num2)) - num3, (num0 * (num1 + num2)) * num3, (num0 * (num1 - num2)) + num3, (num0 * (num1 - num2)) - num3, (num0 * (num1 - num2)) * num3, (num0 * (num1 * num2)) + num3, (num0 * (num1 * num2)) - num3, (num0 * (num1 * num2)) * num3, num0 + ((num1 + num2) + num3), num0 + ((num1 + num2) - num3), num0 + ((num1 + num2) * num3), num0 + ((num1 - num2) + num3), num0 + ((num1 - num2) - num3), num0 + ((num1 - num2) * num3), num0 + ((num1 * num2) + num3), num0 + ((num1 * num2) - num3), num0 + ((num1 * num2) * num3), num0 - ((num1 + num2) + num3), num0 - ((num1 + num2) - num3), num0 - ((num1 + num2) * num3), num0 - ((num1 - num2) + num3), num0 - ((num1 - num2) - num3), num0 - ((num1 - num2) * num3), num0 - ((num1 * num2) + num3), num0 - ((num1 * num2) - num3), num0 - ((num1 * num2) * num3), num0 * ((num1 + num2) + num3), num0 * ((num1 + num2) - num3), num0 * ((num1 + num2) * num3), num0 * ((num1 - num2) + num3), num0 * ((num1 - num2) - num3), num0 * ((num1 - num2) * num3), num0 * ((num1 * num2) + num3), num0 * ((num1 * num2) - num3), num0 * ((num1 * num2) * num3), num0 + (num1 + (num2 + num3)), num0 + (num1 + (num2 - num3)), num0 + (num1 + (num2 * num3)), num0 + (num1 - (num2 + num3)), num0 + (num1 - (num2 - num3)), num0 + (num1 - (num2 * num3)), num0 + (num1 * (num2 + num3)), num0 + (num1 * (num2 - num3)), num0 + (num1 * (num2 * num3)), num0 - (num1 + (num2 + num3)), num0 - (num1 + (num2 - num3)), num0 - (num1 + (num2 * num3)), num0 - (num1 - (num2 + num3)), num0 - (num1 - (num2 - num3)), num0 - (num1 - (num2 * num3)), num0 - (num1 * (num2 + num3)), num0 - (num1 * (num2 - num3)), num0 - (num1 * (num2 * num3)), num0 * (num1 + (num2 + num3)), num0 * (num1 + (num2 - num3)), num0 * (num1 + (num2 * num3)), num0 * (num1 - (num2 + num3)), num0 * (num1 - (num2 - num3)), num0 * (num1 - (num2 * num3)), num0 * (num1 * (num2 + num3)), num0 * (num1 * (num2 - num3)), num0 * (num1 * (num2 * num3))};
    for (const int result : all_results)
      if (result == 24) return true;
    return false;
  }
  bool judgePoint24(const double num0, const double num1, const double num2, const double num3) {
    const double all_results[]{
        num0 + num1 + num2 / num3, num0 + num1 - num2 / num3, num0 + num1 * num2 / num3, num0 + num1 / num2 + num3, num0 + num1 / num2 - num3, num0 + num1 / num2 * num3, num0 + num1 / num2 / num3, num0 - num1 + num2 / num3, num0 - num1 - num2 / num3, num0 - num1 * num2 / num3, num0 - num1 / num2 + num3, num0 - num1 / num2 - num3, num0 - num1 / num2 * num3, num0 - num1 / num2 / num3, num0 * num1 + num2 / num3, num0 * num1 - num2 / num3, num0 * num1 * num2 / num3, num0 * num1 / num2 + num3, num0 * num1 / num2 - num3, num0 * num1 / num2 * num3, num0 * num1 / num2 / num3, num0 / num1 + num2 + num3, num0 / num1 + num2 - num3, num0 / num1 + num2 * num3, num0 / num1 + num2 / num3, num0 / num1 - num2 + num3, num0 / num1 - num2 - num3, num0 / num1 - num2 * num3, num0 / num1 - num2 / num3, num0 / num1 * num2 + num3, num0 / num1 * num2 - num3, num0 / num1 * num2 * num3, num0 / num1 * num2 / num3, num0 / num1 / num2 + num3, num0 / num1 / num2 - num3, num0 / num1 / num2 * num3, num0 / num1 / num2 / num3, (num0 + num1) + num2 / num3, (num0 + num1) - num2 / num3, (num0 + num1) * num2 / num3, (num0 + num1) / num2 + num3, (num0 + num1) / num2 - num3, (num0 + num1) / num2 * num3, (num0 + num1) / num2 / num3, (num0 - num1) + num2 / num3, (num0 - num1) - num2 / num3, (num0 - num1) * num2 / num3, (num0 - num1) / num2 + num3, (num0 - num1) / num2 - num3, (num0 - num1) / num2 * num3, (num0 - num1) / num2 / num3, (num0 * num1) + num2 / num3, (num0 * num1) - num2 / num3, (num0 * num1) * num2 / num3, (num0 * num1) / num2 + num3, (num0 * num1) / num2 - num3, (num0 * num1) / num2 * num3, (num0 * num1) / num2 / num3, (num0 / num1) + num2 + num3, (num0 / num1) + num2 - num3, (num0 / num1) + num2 * num3, (num0 / num1) + num2 / num3, (num0 / num1) - num2 + num3, (num0 / num1) - num2 - num3, (num0 / num1) - num2 * num3, (num0 / num1) - num2 / num3, (num0 / num1) * num2 + num3, (num0 / num1) * num2 - num3, (num0 / num1) * num2 * num3, (num0 / num1) * num2 / num3, (num0 / num1) / num2 + num3, (num0 / num1) / num2 - num3, (num0 / num1) / num2 * num3, (num0 / num1) / num2 / num3, num0 + (num1 + num2) / num3, num0 + (num1 - num2) / num3, num0 + (num1 * num2) / num3, num0 + (num1 / num2) + num3, num0 + (num1 / num2) - num3, num0 + (num1 / num2) * num3, num0 + (num1 / num2) / num3, num0 - (num1 + num2) / num3, num0 - (num1 - num2) / num3, num0 - (num1 * num2) / num3, num0 - (num1 / num2) + num3, num0 - (num1 / num2) - num3, num0 - (num1 / num2) * num3, num0 - (num1 / num2) / num3, num0 * (num1 + num2) / num3, num0 * (num1 - num2) / num3, num0 * (num1 * num2) / num3, num0 * (num1 / num2) + num3, num0 * (num1 / num2) - num3, num0 * (num1 / num2) * num3, num0 * (num1 / num2) / num3, num0 / (num1 + num2) + num3, num0 / (num1 + num2) - num3, num0 / (num1 + num2) * num3, num0 / (num1 + num2) / num3, num0 / (num1 - num2) + num3, num0 / (num1 - num2) - num3, num0 / (num1 - num2) * num3, num0 / (num1 - num2) / num3, num0 / (num1 * num2) + num3, num0 / (num1 * num2) - num3, num0 / (num1 * num2) * num3, num0 / (num1 * num2) / num3, num0 / (num1 / num2) + num3, num0 / (num1 / num2) - num3, num0 / (num1 / num2) * num3, num0 / (num1 / num2) / num3, num0 + num1 + (num2 / num3), num0 + num1 - (num2 / num3), num0 + num1 * (num2 / num3), num0 + num1 / (num2 + num3), num0 + num1 / (num2 - num3), num0 + num1 / (num2 * num3), num0 + num1 / (num2 / num3), num0 - num1 + (num2 / num3), num0 - num1 - (num2 / num3), num0 - num1 * (num2 / num3), num0 - num1 / (num2 + num3), num0 - num1 / (num2 - num3), num0 - num1 / (num2 * num3), num0 - num1 / (num2 / num3), num0 * num1 + (num2 / num3), num0 * num1 - (num2 / num3), num0 * num1 * (num2 / num3), num0 * num1 / (num2 + num3), num0 * num1 / (num2 - num3), num0 * num1 / (num2 * num3), num0 * num1 / (num2 / num3), num0 / num1 + (num2 + num3), num0 / num1 + (num2 - num3), num0 / num1 + (num2 * num3), num0 / num1 + (num2 / num3), num0 / num1 - (num2 + num3), num0 / num1 - (num2 - num3), num0 / num1 - (num2 * num3), num0 / num1 - (num2 / num3), num0 / num1 * (num2 + num3), num0 / num1 * (num2 - num3), num0 / num1 * (num2 * num3), num0 / num1 * (num2 / num3), num0 / num1 / (num2 + num3), num0 / num1 / (num2 - num3), num0 / num1 / (num2 * num3), num0 / num1 / (num2 / num3), (num0 + num1) + (num2 / num3), (num0 + num1) - (num2 / num3), (num0 + num1) * (num2 / num3), (num0 + num1) / (num2 + num3), (num0 + num1) / (num2 - num3), (num0 + num1) / (num2 * num3), (num0 + num1) / (num2 / num3), (num0 - num1) + (num2 / num3), (num0 - num1) - (num2 / num3), (num0 - num1) * (num2 / num3), (num0 - num1) / (num2 + num3), (num0 - num1) / (num2 - num3), (num0 - num1) / (num2 * num3), (num0 - num1) / (num2 / num3), (num0 * num1) + (num2 / num3), (num0 * num1) - (num2 / num3), (num0 * num1) * (num2 / num3), (num0 * num1) / (num2 + num3), (num0 * num1) / (num2 - num3), (num0 * num1) / (num2 * num3), (num0 * num1) / (num2 / num3), (num0 / num1) + (num2 + num3), (num0 / num1) + (num2 - num3), (num0 / num1) + (num2 * num3), (num0 / num1) + (num2 / num3), (num0 / num1) - (num2 + num3), (num0 / num1) - (num2 - num3), (num0 / num1) - (num2 * num3), (num0 / num1) - (num2 / num3), (num0 / num1) * (num2 + num3), (num0 / num1) * (num2 - num3), (num0 / num1) * (num2 * num3), (num0 / num1) * (num2 / num3), (num0 / num1) / (num2 + num3), (num0 / num1) / (num2 - num3), (num0 / num1) / (num2 * num3), (num0 / num1) / (num2 / num3), ((num0 + num1) + num2) / num3, ((num0 + num1) - num2) / num3, ((num0 + num1) * num2) / num3, ((num0 + num1) / num2) + num3, ((num0 + num1) / num2) - num3, ((num0 + num1) / num2) * num3, ((num0 + num1) / num2) / num3, ((num0 - num1) + num2) / num3, ((num0 - num1) - num2) / num3, ((num0 - num1) * num2) / num3, ((num0 - num1) / num2) + num3, ((num0 - num1) / num2) - num3, ((num0 - num1) / num2) * num3, ((num0 - num1) / num2) / num3, ((num0 * num1) + num2) / num3, ((num0 * num1) - num2) / num3, ((num0 * num1) * num2) / num3, ((num0 * num1) / num2) + num3, ((num0 * num1) / num2) - num3, ((num0 * num1) / num2) * num3, ((num0 * num1) / num2) / num3, ((num0 / num1) + num2) + num3, ((num0 / num1) + num2) - num3, ((num0 / num1) + num2) * num3, ((num0 / num1) + num2) / num3, ((num0 / num1) - num2) + num3, ((num0 / num1) - num2) - num3, ((num0 / num1) - num2) * num3, ((num0 / num1) - num2) / num3, ((num0 / num1) * num2) + num3, ((num0 / num1) * num2) - num3, ((num0 / num1) * num2) * num3, ((num0 / num1) * num2) / num3, ((num0 / num1) / num2) + num3, ((num0 / num1) / num2) - num3, ((num0 / num1) / num2) * num3, ((num0 / num1) / num2) / num3, (num0 + (num1 + num2)) / num3, (num0 + (num1 - num2)) / num3, (num0 + (num1 * num2)) / num3, (num0 + (num1 / num2)) + num3, (num0 + (num1 / num2)) - num3, (num0 + (num1 / num2)) * num3, (num0 + (num1 / num2)) / num3, (num0 - (num1 + num2)) / num3, (num0 - (num1 - num2)) / num3, (num0 - (num1 * num2)) / num3, (num0 - (num1 / num2)) + num3, (num0 - (num1 / num2)) - num3, (num0 - (num1 / num2)) * num3, (num0 - (num1 / num2)) / num3, (num0 * (num1 + num2)) / num3, (num0 * (num1 - num2)) / num3, (num0 * (num1 * num2)) / num3, (num0 * (num1 / num2)) + num3, (num0 * (num1 / num2)) - num3, (num0 * (num1 / num2)) * num3, (num0 * (num1 / num2)) / num3, (num0 / (num1 + num2)) + num3, (num0 / (num1 + num2)) - num3, (num0 / (num1 + num2)) * num3, (num0 / (num1 + num2)) / num3, (num0 / (num1 - num2)) + num3, (num0 / (num1 - num2)) - num3, (num0 / (num1 - num2)) * num3, (num0 / (num1 - num2)) / num3, (num0 / (num1 * num2)) + num3, (num0 / (num1 * num2)) - num3, (num0 / (num1 * num2)) * num3, (num0 / (num1 * num2)) / num3, (num0 / (num1 / num2)) + num3, (num0 / (num1 / num2)) - num3, (num0 / (num1 / num2)) * num3, (num0 / (num1 / num2)) / num3, num0 + ((num1 + num2) / num3), num0 + ((num1 - num2) / num3), num0 + ((num1 * num2) / num3), num0 + ((num1 / num2) + num3), num0 + ((num1 / num2) - num3), num0 + ((num1 / num2) * num3), num0 + ((num1 / num2) / num3), num0 - ((num1 + num2) / num3), num0 - ((num1 - num2) / num3), num0 - ((num1 * num2) / num3), num0 - ((num1 / num2) + num3), num0 - ((num1 / num2) - num3), num0 - ((num1 / num2) * num3), num0 - ((num1 / num2) / num3), num0 * ((num1 + num2) / num3), num0 * ((num1 - num2) / num3), num0 * ((num1 * num2) / num3), num0 * ((num1 / num2) + num3), num0 * ((num1 / num2) - num3), num0 * ((num1 / num2) * num3), num0 * ((num1 / num2) / num3), num0 / ((num1 + num2) + num3), num0 / ((num1 + num2) - num3), num0 / ((num1 + num2) * num3), num0 / ((num1 + num2) / num3), num0 / ((num1 - num2) + num3), num0 / ((num1 - num2) - num3), num0 / ((num1 - num2) * num3), num0 / ((num1 - num2) / num3), num0 / ((num1 * num2) + num3), num0 / ((num1 * num2) - num3), num0 / ((num1 * num2) * num3), num0 / ((num1 * num2) / num3), num0 / ((num1 / num2) + num3), num0 / ((num1 / num2) - num3), num0 / ((num1 / num2) * num3), num0 / ((num1 / num2) / num3), num0 + (num1 + (num2 / num3)), num0 + (num1 - (num2 / num3)), num0 + (num1 * (num2 / num3)), num0 + (num1 / (num2 + num3)), num0 + (num1 / (num2 - num3)), num0 + (num1 / (num2 * num3)), num0 + (num1 / (num2 / num3)), num0 - (num1 + (num2 / num3)), num0 - (num1 - (num2 / num3)), num0 - (num1 * (num2 / num3)), num0 - (num1 / (num2 + num3)), num0 - (num1 / (num2 - num3)), num0 - (num1 / (num2 * num3)), num0 - (num1 / (num2 / num3)), num0 * (num1 + (num2 / num3)), num0 * (num1 - (num2 / num3)), num0 * (num1 * (num2 / num3)), num0 * (num1 / (num2 + num3)), num0 * (num1 / (num2 - num3)), num0 * (num1 / (num2 * num3)), num0 * (num1 / (num2 / num3)), num0 / (num1 + (num2 + num3)), num0 / (num1 + (num2 - num3)), num0 / (num1 + (num2 * num3)), num0 / (num1 + (num2 / num3)), num0 / (num1 - (num2 + num3)), num0 / (num1 - (num2 - num3)), num0 / (num1 - (num2 * num3)), num0 / (num1 - (num2 / num3)), num0 / (num1 * (num2 + num3)), num0 / (num1 * (num2 - num3)), num0 / (num1 * (num2 * num3)), num0 / (num1 * (num2 / num3)), num0 / (num1 / (num2 + num3)), num0 / (num1 / (num2 - num3)), num0 / (num1 / (num2 * num3)), num0 / (num1 / (num2 / num3))};
    for (const double result : all_results)
      if (result - 24.0 < 0.00001 && 24.0 - result < 0.00001) return true;
    return false;
  }
};

int main(const int argc, const char* argv[]) {
  Solution sln;

  for (int i = 1; i <= 9; ++i)
    for (int j = 1; j <= 9; ++j)
      for (int k = 1; k <= 9; ++k)
        for (int l = 1; l <= 9; ++l) {
          if (!sln.judgePoint24({i, j, k, l}))
            cout << i << ", " << j << ", " << k << ", " << l << (sln.judgePoint24({i, j, k, l}) ? ": true" : ": false") << endl;
        }
  return 0;
}

int main01(const int argc, const char* argv[]) {
  string ops = "+-*/";
  for (const char op1 : ops)
    for (const char op2 : ops)
      for (const char op3 : ops)
        if (op1 == '/' || op2 == '/' || op3 == '/')
          cout << "num0" << op1 << "num1" << op2 << "num2" << op3 << "num3" << endl;
  return 0;
}

int main03(const int argc, const char* argv[]) {
  vector<int> test{5, 2, 3, 4};
  const vector backup(test);
  do {
    std::next_permutation(test.begin(), test.end());
    cout << test[0] << test[1] << test[2] << test[3] << endl;
  } while (test[0] != backup[0] || test[1] != backup[1] || test[2] != backup[2] || test[3] != backup[3]);
  return 0;
}

// enumerate all "false" inputs is a slower solution.
// beats 48%.
class SolutionEnumeration {
 public:
  bool judgePoint24(const vector<int>& nums) {
    const vector<vector<int>> invalid_inputs{
        {1, 1, 1, 1}, {1, 1, 1, 2}, {1, 1, 1, 3}, {1, 1, 1, 4}, {1, 1, 1, 5}, {1, 1, 1, 6}, {1, 1, 1, 7}, {1, 1, 1, 9}, {1, 1, 2, 1}, {1, 1, 2, 2}, {1, 1, 2, 3}, {1, 1, 2, 4}, {1, 1, 2, 5}, {1, 1, 3, 1}, {1, 1, 3, 2}, {1, 1, 3, 3}, {1, 1, 4, 1}, {1, 1, 4, 2}, {1, 1, 5, 1}, {1, 1, 5, 2}, {1, 1, 5, 9}, {1, 1, 6, 1}, {1, 1, 6, 7}, {1, 1, 7, 1}, {1, 1, 7, 6}, {1, 1, 7, 7}, {1, 1, 7, 8}, {1, 1, 7, 9}, {1, 1, 8, 7}, {1, 1, 8, 9}, {1, 1, 9, 1}, {1, 1, 9, 5}, {1, 1, 9, 7}, {1, 1, 9, 8}, {1, 1, 9, 9}, {1, 2, 1, 1}, {1, 2, 1, 2}, {1, 2, 1, 3}, {1, 2, 1, 4}, {1, 2, 1, 5}, {1, 2, 2, 1}, {1, 2, 2, 2}, {1, 2, 2, 3}, {1, 2, 3, 1}, {1, 2, 3, 2}, {1, 2, 4, 1}, {1, 2, 5, 1}, {1, 2, 9, 9}, {1, 3, 1, 1}, {1, 3, 1, 2}, {1, 3, 1, 3}, {1, 3, 2, 1}, {1, 3, 2, 2}, {1, 3, 3, 1}, {1, 3, 5, 5}, {1, 4, 1, 1}, {1, 4, 1, 2}, {1, 4, 2, 1}, {1, 4, 9, 9}, {1, 5, 1, 1}, {1, 5, 1, 2}, {1, 5, 1, 9}, {1, 5, 2, 1}, {1, 5, 3, 5}, {1, 5, 5, 3}, {1, 5, 5, 7}, {1, 5, 5, 8}, {1, 5, 7, 5}, {1, 5, 7, 7}, {1, 5, 8, 5}, {1, 5, 9, 1}, {1, 6, 1, 1}, {1, 6, 1, 7}, {1, 6, 6, 7}, {1, 6, 7, 1}, {1, 6, 7, 6}, {1, 6, 7, 7}, {1, 6, 7, 8}, {1, 6, 8, 7}, {1, 7, 1, 1}, {1, 7, 1, 6}, {1, 7, 1, 7}, {1, 7, 1, 8}, {1, 7, 1, 9}, {1, 7, 5, 5}, {1, 7, 5, 7}, {1, 7, 6, 1}, {1, 7, 6, 6}, {1, 7, 6, 7}, {1, 7, 6, 8}, {1, 7, 7, 1}, {1, 7, 7, 5}, {1, 7, 7, 6}, {1, 7, 7, 7}, {1, 7, 7, 8}, {1, 7, 8, 1}, {1, 7, 8, 6}, {1, 7, 8, 7}, {1, 7, 9, 1}, {1, 8, 1, 7}, {1, 8, 1, 9}, {1, 8, 5, 5}, {1, 8, 6, 7}, {1, 8, 7, 1}, {1, 8, 7, 6}, {1, 8, 7, 7}, {1, 8, 9, 1}, {1, 8, 9, 9}, {1, 9, 1, 1}, {1, 9, 1, 5}, {1, 9, 1, 7}, {1, 9, 1, 8}, {1, 9, 1, 9}, {1, 9, 2, 9}, {1, 9, 4, 9}, {1, 9, 5, 1}, {1, 9, 7, 1}, {1, 9, 8, 1}, {1, 9, 8, 9}, {1, 9, 9, 1}, {1, 9, 9, 2}, {1, 9, 9, 4}, {1, 9, 9, 8}, {1, 9, 9, 9}, {2, 1, 1, 1}, {2, 1, 1, 2}, {2, 1, 1, 3}, {2, 1, 1, 4}, {2, 1, 1, 5}, {2, 1, 2, 1}, {2, 1, 2, 2}, {2, 1, 2, 3}, {2, 1, 3, 1}, {2, 1, 3, 2}, {2, 1, 4, 1}, {2, 1, 5, 1}, {2, 1, 9, 9}, {2, 2, 1, 1}, {2, 2, 1, 2}, {2, 2, 1, 3}, {2, 2, 2, 1}, {2, 2, 2, 2}, {2, 2, 2, 6}, {2, 2, 3, 1}, {2, 2, 6, 2}, {2, 2, 7, 9}, {2, 2, 9, 7}, {2, 2, 9, 9}, {2, 3, 1, 1}, {2, 3, 1, 2}, {2, 3, 2, 1}, {2, 3, 3, 4}, {2, 3, 4, 3}, {2, 4, 1, 1}, {2, 4, 3, 3}, {2, 5, 1, 1}, {2, 5, 5, 5}, {2, 5, 5, 6}, {2, 5, 6, 5}, {2, 5, 9, 9}, {2, 6, 2, 2}, {2, 6, 5, 5}, {2, 6, 7, 7}, {2, 7, 2, 9}, {2, 7, 6, 7}, {2, 7, 7, 6}, {2, 7, 7, 7}, {2, 7, 7, 9}, {2, 7, 9, 2}, {2, 7, 9, 7}, {2, 7, 9, 9}, {2, 9, 1, 9}, {2, 9, 2, 7}, {2, 9, 2, 9}, {2, 9, 5, 9}, {2, 9, 7, 2}, {2, 9, 7, 7}, {2, 9, 7, 9}, {2, 9, 9, 1}, {2, 9, 9, 2}, {2, 9, 9, 5}, {2, 9, 9, 7}, {2, 9, 9, 9}, {3, 1, 1, 1}, {3, 1, 1, 2}, {3, 1, 1, 3}, {3, 1, 2, 1}, {3, 1, 2, 2}, {3, 1, 3, 1}, {3, 1, 5, 5}, {3, 2, 1, 1}, {3, 2, 1, 2}, {3, 2, 2, 1}, {3, 2, 3, 4}, {3, 2, 4, 3}, {3, 3, 1, 1}, {3, 3, 2, 4}, {3, 3, 4, 2}, {3, 3, 5, 8}, {3, 3, 8, 5}, {3, 4, 2, 3}, {3, 4, 3, 2}, {3, 4, 6, 7}, {3, 4, 7, 6}, {3, 4, 8, 8}, {3, 5, 1, 5}, {3, 5, 3, 8}, {3, 5, 5, 1}, {3, 5, 5, 5}, {3, 5, 7, 7}, {3, 5, 8, 3}, {3, 6, 4, 7}, {3, 6, 7, 4}, {3, 7, 4, 6}, {3, 7, 5, 7}, {3, 7, 6, 4}, {3, 7, 7, 5}, {3, 8, 3, 5}, {3, 8, 4, 8}, {3, 8, 5, 3}, {3, 8, 8, 4}, {4, 1, 1, 1}, {4, 1, 1, 2}, {4, 1, 2, 1}, {4, 1, 9, 9}, {4, 2, 1, 1}, {4, 2, 3, 3}, {4, 3, 2, 3}, {4, 3, 3, 2}, {4, 3, 6, 7}, {4, 3, 7, 6}, {4, 3, 8, 8}, {4, 4, 5, 9}, {4, 4, 6, 6}, {4, 4, 6, 7}, {4, 4, 7, 6}, {4, 4, 9, 5}, {4, 4, 9, 9}, {4, 5, 4, 9}, {4, 5, 9, 4}, {4, 6, 3, 7}, {4, 6, 4, 6}, {4, 6, 4, 7}, {4, 6, 6, 4}, {4, 6, 7, 3}, {4, 6, 7, 4}, {4, 7, 3, 6}, {4, 7, 4, 6}, {4, 7, 6, 3}, {4, 7, 6, 4}, {4, 7, 7, 9}, {4, 7, 9, 7}, {4, 8, 3, 8}, {4, 8, 8, 3}, {4, 9, 1, 9}, {4, 9, 4, 5}, {4, 9, 4, 9}, {4, 9, 5, 4}, {4, 9, 7, 7}, {4, 9, 9, 1}, {4, 9, 9, 4}, {4, 9, 9, 9}, {5, 1, 1, 1}, {5, 1, 1, 2}, {5, 1, 1, 9}, {5, 1, 2, 1}, {5, 1, 3, 5}, {5, 1, 5, 3}, {5, 1, 5, 7}, {5, 1, 5, 8}, {5, 1, 7, 5}, {5, 1, 7, 7}, {5, 1, 8, 5}, {5, 1, 9, 1}, {5, 2, 1, 1}, {5, 2, 5, 5}, {5, 2, 5, 6}, {5, 2, 6, 5}, {5, 2, 9, 9}, {5, 3, 1, 5}, {5, 3, 3, 8}, {5, 3, 5, 1}, {5, 3, 5, 5}, {5, 3, 7, 7}, {5, 3, 8, 3}, {5, 4, 4, 9}, {5, 4, 9, 4}, {5, 5, 1, 3}, {5, 5, 1, 7}, {5, 5, 1, 8}, {5, 5, 2, 5}, {5, 5, 2, 6}, {5, 5, 3, 1}, {5, 5, 3, 5}, {5, 5, 5, 2}, {5, 5, 5, 3}, {5, 5, 5, 7}, {5, 5, 5, 8}, {5, 5, 6, 2}, {5, 5, 6, 9}, {5, 5, 7, 1}, {5, 5, 7, 5}, {5, 5, 7, 9}, {5, 5, 8, 1}, {5, 5, 8, 5}, {5, 5, 9, 6}, {5, 5, 9, 7}, {5, 6, 2, 5}, {5, 6, 5, 2}, {5, 6, 5, 9}, {5, 6, 9, 5}, {5, 7, 1, 5}, {5, 7, 1, 7}, {5, 7, 3, 7}, {5, 7, 5, 1}, {5, 7, 5, 5}, {5, 7, 5, 9}, {5, 7, 7, 1}, {5, 7, 7, 3}, {5, 7, 7, 7}, {5, 7, 7, 8}, {5, 7, 8, 7}, {5, 7, 9, 5}, {5, 7, 9, 9}, {5, 8, 1, 5}, {5, 8, 3, 3}, {5, 8, 5, 1}, {5, 8, 5, 5}, {5, 8, 7, 7}, {5, 8, 9, 9}, {5, 9, 1, 1}, {5, 9, 2, 9}, {5, 9, 4, 4}, {5, 9, 5, 6}, {5, 9, 5, 7}, {5, 9, 6, 5}, {5, 9, 7, 5}, {5, 9, 7, 9}, {5, 9, 8, 9}, {5, 9, 9, 2}, {5, 9, 9, 7}, {5, 9, 9, 8}, {5, 9, 9, 9}, {6, 1, 1, 1}, {6, 1, 1, 7}, {6, 1, 6, 7}, {6, 1, 7, 1}, {6, 1, 7, 6}, {6, 1, 7, 7}, {6, 1, 7, 8}, {6, 1, 8, 7}, {6, 2, 2, 2}, {6, 2, 5, 5}, {6, 2, 7, 7}, {6, 3, 4, 7}, {6, 3, 7, 4}, {6, 4, 3, 7}, {6, 4, 4, 6}, {6, 4, 4, 7}, {6, 4, 6, 4}, {6, 4, 7, 3}, {6, 4, 7, 4}, {6, 5, 2, 5}, {6, 5, 5, 2}, {6, 5, 5, 9}, {6, 5, 9, 5}, {6, 6, 1, 7}, {6, 6, 4, 4}, {6, 6, 6, 7}, {6, 6, 7, 1}, {6, 6, 7, 6}, {6, 6, 7, 7}, {6, 6, 7, 8}, {6, 6, 8, 7}, {6, 6, 9, 9}, {6, 7, 1, 1}, {6, 7, 1, 6}, {6, 7, 1, 7}, {6, 7, 1, 8}, {6, 7, 2, 7}, {6, 7, 3, 4}, {6, 7, 4, 3}, {6, 7, 4, 4}, {6, 7, 6, 1}, {6, 7, 6, 6}, {6, 7, 6, 7}, {6, 7, 6, 8}, {6, 7, 7, 1}, {6, 7, 7, 2}, {6, 7, 7, 6}, {6, 7, 7, 7}, {6, 7, 7, 8}, {6, 7, 7, 9}, {6, 7, 8, 1}, {6, 7, 8, 6}, {6, 7, 8, 7}, {6, 7, 8, 8}, {6, 7, 9, 7}, {6, 8, 1, 7}, {6, 8, 6, 7}, {6, 8, 7, 1}, {6, 8, 7, 6}, {6, 8, 7, 7}, {6, 8, 7, 8}, {6, 8, 8, 7}, {6, 9, 5, 5}, {6, 9, 6, 9}, {6, 9, 7, 7}, {6, 9, 9, 6}, {6, 9, 9, 9}, {7, 1, 1, 1}, {7, 1, 1, 6}, {7, 1, 1, 7}, {7, 1, 1, 8}, {7, 1, 1, 9}, {7, 1, 5, 5}, {7, 1, 5, 7}, {7, 1, 6, 1}, {7, 1, 6, 6}, {7, 1, 6, 7}, {7, 1, 6, 8}, {7, 1, 7, 1}, {7, 1, 7, 5}, {7, 1, 7, 6}, {7, 1, 7, 7}, {7, 1, 7, 8}, {7, 1, 8, 1}, {7, 1, 8, 6}, {7, 1, 8, 7}, {7, 1, 9, 1}, {7, 2, 2, 9}, {7, 2, 6, 7}, {7, 2, 7, 6}, {7, 2, 7, 7}, {7, 2, 7, 9}, {7, 2, 9, 2}, {7, 2, 9, 7}, {7, 2, 9, 9}, {7, 3, 4, 6}, {7, 3, 5, 7}, {7, 3, 6, 4}, {7, 3, 7, 5}, {7, 4, 3, 6}, {7, 4, 4, 6}, {7, 4, 6, 3}, {7, 4, 6, 4}, {7, 4, 7, 9}, {7, 4, 9, 7}, {7, 5, 1, 5}, {7, 5, 1, 7}, {7, 5, 3, 7}, {7, 5, 5, 1}, {7, 5, 5, 5}, {7, 5, 5, 9}, {7, 5, 7, 1}, {7, 5, 7, 3}, {7, 5, 7, 7}, {7, 5, 7, 8}, {7, 5, 8, 7}, {7, 5, 9, 5}, {7, 5, 9, 9}, {7, 6, 1, 1}, {7, 6, 1, 6}, {7, 6, 1, 7}, {7, 6, 1, 8}, {7, 6, 2, 7}, {7, 6, 3, 4}, {7, 6, 4, 3}, {7, 6, 4, 4}, {7, 6, 6, 1}, {7, 6, 6, 6}, {7, 6, 6, 7}, {7, 6, 6, 8}, {7, 6, 7, 1}, {7, 6, 7, 2}, {7, 6, 7, 6}, {7, 6, 7, 7}, {7, 6, 7, 8}, {7, 6, 7, 9}, {7, 6, 8, 1}, {7, 6, 8, 6}, {7, 6, 8, 7}, {7, 6, 8, 8}, {7, 6, 9, 7}, {7, 7, 1, 1}, {7, 7, 1, 5}, {7, 7, 1, 6}, {7, 7, 1, 7}, {7, 7, 1, 8}, {7, 7, 2, 6}, {7, 7, 2, 7}, {7, 7, 2, 9}, {7, 7, 3, 5}, {7, 7, 4, 9}, {7, 7, 5, 1}, {7, 7, 5, 3}, {7, 7, 5, 7}, {7, 7, 5, 8}, {7, 7, 6, 1}, {7, 7, 6, 2}, {7, 7, 6, 6}, {7, 7, 6, 7}, {7, 7, 6, 8}, {7, 7, 6, 9}, {7, 7, 7, 1}, {7, 7, 7, 2}, {7, 7, 7, 5}, {7, 7, 7, 6}, {7, 7, 7, 7}, {7, 7, 7, 8}, {7, 7, 7, 9}, {7, 7, 8, 1}, {7, 7, 8, 5}, {7, 7, 8, 6}, {7, 7, 8, 7}, {7, 7, 8, 8}, {7, 7, 8, 9}, {7, 7, 9, 2}, {7, 7, 9, 4}, {7, 7, 9, 6}, {7, 7, 9, 7}, {7, 7, 9, 8}, {7, 7, 9, 9}, {7, 8, 1, 1}, {7, 8, 1, 6}, {7, 8, 1, 7}, {7, 8, 5, 7}, {7, 8, 6, 1}, {7, 8, 6, 6}, {7, 8, 6, 7}, {7, 8, 6, 8}, {7, 8, 7, 1}, {7, 8, 7, 5}, {7, 8, 7, 6}, {7, 8, 7, 7}, {7, 8, 7, 8}, {7, 8, 7, 9}, {7, 8, 8, 6}, {7, 8, 8, 7}, {7, 8, 8, 8}, {7, 8, 9, 7}, {7, 8, 9, 9}, {7, 9, 1, 1}, {7, 9, 2, 2}, {7, 9, 2, 7}, {7, 9, 2, 9}, {7, 9, 4, 7}, {7, 9, 5, 5}, {7, 9, 5, 9}, {7, 9, 6, 7}, {7, 9, 7, 2}, {7, 9, 7, 4}, {7, 9, 7, 6}, {7, 9, 7, 7}, {7, 9, 7, 8}, {7, 9, 7, 9}, {7, 9, 8, 7}, {7, 9, 8, 9}, {7, 9, 9, 2}, {7, 9, 9, 5}, {7, 9, 9, 7}, {7, 9, 9, 8}, {7, 9, 9, 9}, {8, 1, 1, 7}, {8, 1, 1, 9}, {8, 1, 5, 5}, {8, 1, 6, 7}, {8, 1, 7, 1}, {8, 1, 7, 6}, {8, 1, 7, 7}, {8, 1, 9, 1}, {8, 1, 9, 9}, {8, 3, 3, 5}, {8, 3, 4, 8}, {8, 3, 5, 3}, {8, 3, 8, 4}, {8, 4, 3, 8}, {8, 4, 8, 3}, {8, 5, 1, 5}, {8, 5, 3, 3}, {8, 5, 5, 1}, {8, 5, 5, 5}, {8, 5, 7, 7}, {8, 5, 9, 9}, {8, 6, 1, 7}, {8, 6, 6, 7}, {8, 6, 7, 1}, {8, 6, 7, 6}, {8, 6, 7, 7}, {8, 6, 7, 8}, {8, 6, 8, 7}, {8, 7, 1, 1}, {8, 7, 1, 6}, {8, 7, 1, 7}, {8, 7, 5, 7}, {8, 7, 6, 1}, {8, 7, 6, 6}, {8, 7, 6, 7}, {8, 7, 6, 8}, {8, 7, 7, 1}, {8, 7, 7, 5}, {8, 7, 7, 6}, {8, 7, 7, 7}, {8, 7, 7, 8}, {8, 7, 7, 9}, {8, 7, 8, 6}, {8, 7, 8, 7}, {8, 7, 8, 8}, {8, 7, 9, 7}, {8, 7, 9, 9}, {8, 8, 3, 4}, {8, 8, 4, 3}, {8, 8, 6, 7}, {8, 8, 7, 6}, {8, 8, 7, 7}, {8, 8, 7, 8}, {8, 8, 8, 7}, {8, 8, 8, 8}, {8, 8, 8, 9}, {8, 8, 9, 8}, {8, 8, 9, 9}, {8, 9, 1, 1}, {8, 9, 1, 9}, {8, 9, 5, 9}, {8, 9, 7, 7}, {8, 9, 7, 9}, {8, 9, 8, 8}, {8, 9, 8, 9}, {8, 9, 9, 1}, {8, 9, 9, 5}, {8, 9, 9, 7}, {8, 9, 9, 8}, {8, 9, 9, 9}, {9, 1, 1, 1}, {9, 1, 1, 5}, {9, 1, 1, 7}, {9, 1, 1, 8}, {9, 1, 1, 9}, {9, 1, 2, 9}, {9, 1, 4, 9}, {9, 1, 5, 1}, {9, 1, 7, 1}, {9, 1, 8, 1}, {9, 1, 8, 9}, {9, 1, 9, 1}, {9, 1, 9, 2}, {9, 1, 9, 4}, {9, 1, 9, 8}, {9, 1, 9, 9}, {9, 2, 1, 9}, {9, 2, 2, 7}, {9, 2, 2, 9}, {9, 2, 5, 9}, {9, 2, 7, 2}, {9, 2, 7, 7}, {9, 2, 7, 9}, {9, 2, 9, 1}, {9, 2, 9, 2}, {9, 2, 9, 5}, {9, 2, 9, 7}, {9, 2, 9, 9}, {9, 4, 1, 9}, {9, 4, 4, 5}, {9, 4, 4, 9}, {9, 4, 5, 4}, {9, 4, 7, 7}, {9, 4, 9, 1}, {9, 4, 9, 4}, {9, 4, 9, 9}, {9, 5, 1, 1}, {9, 5, 2, 9}, {9, 5, 4, 4}, {9, 5, 5, 6}, {9, 5, 5, 7}, {9, 5, 6, 5}, {9, 5, 7, 5}, {9, 5, 7, 9}, {9, 5, 8, 9}, {9, 5, 9, 2}, {9, 5, 9, 7}, {9, 5, 9, 8}, {9, 5, 9, 9}, {9, 6, 5, 5}, {9, 6, 6, 9}, {9, 6, 7, 7}, {9, 6, 9, 6}, {9, 6, 9, 9}, {9, 7, 1, 1}, {9, 7, 2, 2}, {9, 7, 2, 7}, {9, 7, 2, 9}, {9, 7, 4, 7}, {9, 7, 5, 5}, {9, 7, 5, 9}, {9, 7, 6, 7}, {9, 7, 7, 2}, {9, 7, 7, 4}, {9, 7, 7, 6}, {9, 7, 7, 7}, {9, 7, 7, 8}, {9, 7, 7, 9}, {9, 7, 8, 7}, {9, 7, 8, 9}, {9, 7, 9, 2}, {9, 7, 9, 5}, {9, 7, 9, 7}, {9, 7, 9, 8}, {9, 7, 9, 9}, {9, 8, 1, 1}, {9, 8, 1, 9}, {9, 8, 5, 9}, {9, 8, 7, 7}, {9, 8, 7, 9}, {9, 8, 8, 8}, {9, 8, 8, 9}, {9, 8, 9, 1}, {9, 8, 9, 5}, {9, 8, 9, 7}, {9, 8, 9, 8}, {9, 8, 9, 9}, {9, 9, 1, 1}, {9, 9, 1, 2}, {9, 9, 1, 4}, {9, 9, 1, 8}, {9, 9, 1, 9}, {9, 9, 2, 1}, {9, 9, 2, 2}, {9, 9, 2, 5}, {9, 9, 2, 7}, {9, 9, 2, 9}, {9, 9, 4, 1}, {9, 9, 4, 4}, {9, 9, 4, 9}, {9, 9, 5, 2}, {9, 9, 5, 7}, {9, 9, 5, 8}, {9, 9, 5, 9}, {9, 9, 6, 6}, {9, 9, 6, 9}, {9, 9, 7, 2}, {9, 9, 7, 5}, {9, 9, 7, 7}, {9, 9, 7, 8}, {9, 9, 7, 9}, {9, 9, 8, 1}, {9, 9, 8, 5}, {9, 9, 8, 7}, {9, 9, 8, 8}, {9, 9, 8, 9}, {9, 9, 9, 1}, {9, 9, 9, 2}, {9, 9, 9, 4}, {9, 9, 9, 5}, {9, 9, 9, 6}, {9, 9, 9, 7}, {9, 9, 9, 8}, {9, 9, 9, 9}};

    for (const auto& vec : invalid_inputs)
      if (nums[0] == vec[0] && nums[1] == vec[1] && nums[2] == vec[2] && nums[3] == vec[3]) return false;
    return true;
  }
};
